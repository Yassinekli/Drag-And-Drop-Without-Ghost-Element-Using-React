let indexDraggedElement = this.state.boxes.findIndex((box)=>(box.id === this.state.draggedId));
let indexHoveredElement = this.state.boxes.findIndex((box)=>(box.id === hoveredId));		

let draggedBoxes;

if(indexDraggedElement > indexHoveredElement)
    draggedBoxes = this.state.boxes.slice(indexHoveredElement, indexDraggedElement);
else
    draggedBoxes = this.state.boxes.slice((indexDraggedElement + 1), (indexHoveredElement + 1));

let filteredBoxes = [];
for (let i = 0; i < this.state.boxes.length; i++) {
    let breaked = false;
    for (let j = 0; j < draggedBoxes.length; j++) {
        if(this.state.boxes[i].id === draggedBoxes[j].id)
            { breaked = true; break; }
    }
    if(!breaked)
        filteredBoxes.push(this.state.boxes[i]);
}

if(indexDraggedElement > indexHoveredElement)
    draggedBoxes.forEach(box => {
        filteredBoxes.splice(++indexHoveredElement, 0, box)
    });
else
    draggedBoxes.forEach(box => {
        filteredBoxes.splice(indexDraggedElement++, 0, box)
    });

    
let hoveredRec = e.target.getBoundingClientRect();
let parentRec = e.target.parentNode.getBoundingClientRect();
filteredBoxes[filteredBoxes.length - 1].top = ((hoveredRec.top - parentRec.top) + "px");
































import React, { Component } from 'react';
import Item from './Item';

class Container extends Component {
	constructor(){
		super();
		this.state = {
			draggedId: null,
			boxes : [
				{id : '0', color : '#dede30', top: '0px'},
				{id : '1', color : '#d82b2b', top: '100px'},
				{id : '2', color : '#3434da', top: '200px'},
				{id : '3', color : '#2bb130', top: '300px'},
				{id : '4', color : '#7d34da', top: '400px'}
			]
		}
	}
	
	/*
		Methods
	*/
	getBoxes(){
		return this.state.boxes.map((box) =>
				<Item
					key={box.id}
					id={box.id}
					style={{color:box.color, top : box.top}}
					
					draggedId={this.state.draggedId}
					dragStartHandler={this.dragStartHandler}
					dragEnterHandler={this.dragEnterHandler}
					dragEndHandler={this.dragEndHandler}
				/>
			);
	}

	/*
		Handlers
	*/
	dragStartHandler = (e)=>{
		let boxes = this.state.boxes.slice();

		let draggedStyle = window.getComputedStyle(e.target);
		let draggedRec = e.target.getBoundingClientRect();
		let parentRec = e.target.parentNode.getBoundingClientRect();

		let color = draggedStyle.backgroundColor;
		let top = (draggedRec.top - parentRec.top) + "px";

		boxes.push(
			{
				id : e.target.getAttribute('id') + 'c', 
				color,
				top
			}
		)

		this.setState({
			draggedId: e.target.getAttribute('id'),
			boxes
		});
	}

	dragEnterHandler = (e)=>{
		let hoveredId = e.currentTarget.getAttribute('id');
		
		if(hoveredId === this.state.draggedId || hoveredId.endsWith('c'))
			return;

		let indexDraggedElement = this.state.boxes.findIndex((box)=>(box.id === this.state.draggedId));
		let indexHoveredElement = this.state.boxes.findIndex((box)=>(box.id === hoveredId));		

		let draggedBoxes;
		
		if(indexDraggedElement > indexHoveredElement)
			draggedBoxes = this.state.boxes.slice(indexHoveredElement, indexDraggedElement);
		else
			draggedBoxes = this.state.boxes.slice((indexDraggedElement + 1), (indexHoveredElement + 1));

		let filteredBoxes = [];
		for (let i = 0; i < this.state.boxes.length; i++) {
			let breaked = false;
			for (let j = 0; j < draggedBoxes.length; j++) {
				if(this.state.boxes[i].id === draggedBoxes[j].id)
					{ breaked = true; break; }
			}
			if(!breaked)
				filteredBoxes.push(this.state.boxes[i]);
		}

		if(indexDraggedElement > indexHoveredElement)
			draggedBoxes.forEach(box => {
				filteredBoxes.splice(++indexHoveredElement, 0, box)
			});
		else
			draggedBoxes.forEach(box => {
				filteredBoxes.splice(indexDraggedElement++, 0, box)
			});

		filteredBoxes = filteredBoxes.map((box, i)=>{
			if(!box.id.toString().endsWith('c'))
				box.top = (100 * i) + "px";
			return box;
		})
			
		let hoveredRec = e.target.getBoundingClientRect();
		let parentRec = e.target.parentNode.getBoundingClientRect();
		filteredBoxes[filteredBoxes.length - 1].top = ((hoveredRec.top - parentRec.top) + "px");

		this.setState({
			draggedId: this.state.draggedId,
			boxes: filteredBoxes
		});
	}

	dragEndHandler = (e)=>{
		let boxes = this.state.boxes.slice();
		boxes.pop();

		this.setState({
			draggedId: null,
			boxes
		});
	}
	

	render() {
		let boxes = this.getBoxes();

		return (
			<div 
				className="container"
				style={{height: (this.state.draggedId) ? ((boxes.length - 1) * 100) : (boxes.length * 100)}}
			>
				{boxes}
			</div>
		)
	}
}

export default Container;







import React, { Component } from 'react';
import Item from './Item';

class Container extends Component {
	constructor(){
		super();
		this.state = {
			draggedId: null,
			boxes : [
				{id : '0', color : '#dede30', top: '0px'},
				{id : '1', color : '#d82b2b', top: '100px'},
				{id : '2', color : '#3434da', top: '200px'},
				{id : '3', color : '#2bb130', top: '300px'},
				{id : '4', color : '#7d34da', top: '400px'}
			]
		}
	}
	
	/*
		Methods
	*/
	getBoxes(){
		/* let boxes = this.state.boxes
		.map((box, i) => {
			if(!box.id.toString().endsWith('c'))
				box.top = (100 * i) + "px";
			return box; 
		}); */

		return this.state.boxes.map((box) =>
				<Item
					key={box.id}
					id={box.id}
					style={{color:box.color, top : box.top}}
					
					draggedId={this.state.draggedId}
					dragStartHandler={this.dragStartHandler}
					dragEnterHandler={this.dragEnterHandler}
					dragEndHandler={this.dragEndHandler}
				/>
			);
	}

	/*
		Handlers
	*/
	dragStartHandler = (e)=>{
		let boxes = this.state.boxes.slice();

		let draggedStyle = window.getComputedStyle(e.target);
		let draggedRec = e.target.getBoundingClientRect();
		let parentRec = e.target.parentNode.getBoundingClientRect();

		let color = draggedStyle.backgroundColor;
		let top = (draggedRec.top - parentRec.top) + "px";

		boxes.push(
			{
				id : e.target.getAttribute('id') + 'c', 
				color,
				top
			}
		)

		this.setState({
			draggedId: e.target.getAttribute('id'),
			boxes
		});
	}

	dragEnterHandler = (e)=>{
		let hoveredId = e.currentTarget.getAttribute('id');
		
		if(hoveredId === this.state.draggedId || hoveredId.endsWith('c'))
			return;

		let draggedBox, hoveredBox;

		draggedBox = this.state.boxes.find((box)=>(box.id === this.state.draggedId));
		hoveredBox = this.state.boxes.find((box)=>(box.id === hoveredId));

		let boxes = this.state.boxes.slice();

		boxes[1] = hoveredBox;
		boxes[0] = draggedBox;

		let bboxes = boxes.map((box, i) => {
						if(!box.id.toString().endsWith('c'))
							box.top = (100 * i) + "px";
						return box; 
					});
		
		console.log(bboxes)
		this.setState({
			draggedId: this.state.draggedId,
			bboxes
		});
	}

	dragEndHandler = (e)=>{
		let boxes = this.state.boxes.slice();
		boxes.pop();

		this.setState({
			draggedId: null,
			boxes
		});
	}
	

	render() {
		let boxes = this.getBoxes();

		return (
			<div 
				className="container"
				style={{height: (this.state.draggedId) ? ((boxes.length - 1) * 100) : (boxes.length * 100)}}
			>
				{boxes}
			</div>
		)
	}
}

export default Container;










































import React, { Component } from 'react';
import Item from './Item';

class Container extends Component {
	constructor(){
		super();
		this.state = {
			draggedId: null,
			boxes : [
				{id : '0', color : '#dede30', order: 1},
				{id : '1', color : '#d82b2b', order: 2},
				{id : '2', color : '#3434da', order: 3},
				{id : '3', color : '#2bb130', order: 4},
				{id : '4', color : '#7d34da', order: 5}
			]
		}
	}
	
	/*
		Methods
	*/
	getBoxes(){
		//console.log(this.state.boxes)
		return this.state.boxes.map(({id, color, order, top}) =>
				<Item
					key={id}
					id={id}
					style={{color:color, top : (id.endsWith('c')) ? top : (100 * (order - 1))}}
					
					draggedId={this.state.draggedId}
					dragStartHandler={this.dragStartHandler}
					dragEnterHandler={this.dragEnterHandler}
					dragEndHandler={this.dragEndHandler}
				/>
			);
	}

	/*
		Handlers
	*/
	dragStartHandler = (e)=>{
		let boxes = this.state.boxes.slice();

		let draggedStyle = window.getComputedStyle(e.target);
		let draggedRec = e.target.getBoundingClientRect();
		let parentRec = e.target.parentNode.getBoundingClientRect();

		let color = draggedStyle.backgroundColor;
		let top = (draggedRec.top - parentRec.top) + "px";

		boxes.push(
			{
				id : e.target.getAttribute('id') + 'c', 
				color,
				top
			}
		)

		this.setState({
			draggedId: e.target.getAttribute('id'),
			boxes
		});
	}

	dragEnterHandler = (e)=>{
		let hoveredId = e.currentTarget.getAttribute('id');
		
		if(hoveredId === this.state.draggedId || hoveredId.endsWith('c'))
			return;

		let orderDraggedElement = this.state.boxes.find((box)=>(box.id === this.state.draggedId)).order;
		let orderHoveredElement = this.state.boxes.find((box)=>(box.id === hoveredId)).order;

		let boxes = this.state.boxes.slice();
		let draggedBoxes = [];
		let draggedIndex;
		let hoveredIndex;
		
		if(orderDraggedElement > orderHoveredElement)
		{
			this.state.boxes.forEach((box, i)=>{
				if(box.order === orderHoveredElement)
					draggedIndex = i;
				if(box.order === orderDraggedElement)
					hoveredIndex = i;
				if(box.order > orderHoveredElement && box.order <= orderDraggedElement)
					draggedBoxes.push(box);
			})
		}
		else
		{
			this.state.boxes.forEach((box, i)=>{
				if(box.order === orderDraggedElement)
					draggedIndex = i;
				if(box.order === orderHoveredElement)
					hoveredIndex = i;
				if(box.order > orderDraggedElement && box.order <= orderHoveredElement)
					draggedBoxes.push(box);
			})
		}
		
		boxes[draggedIndex].order = boxes[hoveredIndex].order;
		draggedBoxes.forEach(box=>--box.order);
		
		let hoveredRec = e.target.getBoundingClientRect();
		let parentRec = e.target.parentNode.getBoundingClientRect();
		boxes[boxes.length - 1].top = ((hoveredRec.top - parentRec.top) + "px");		

		this.setState({
			draggedId: this.state.draggedId,
			boxes
		});
	}

	dragEndHandler = (e)=>{
		let boxes = this.state.boxes.slice();
		boxes.pop();

		this.setState({
			draggedId: null,
			boxes
		});
	}
	

	render() {
		let boxes = this.getBoxes();

		return (
			<div 
				className="container"
				style={{height: (this.state.draggedId) ? ((boxes.length - 1) * 100) : (boxes.length * 100)}}
			>
				{boxes}
			</div>
		)
	}
}

export default Container;